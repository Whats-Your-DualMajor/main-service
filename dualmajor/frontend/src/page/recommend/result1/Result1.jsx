import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import { Button, Accordion} from 'react-bootstrap';
import RecommendService from '../../../services/recommend.service';
import { useNavigate } from 'react-router-dom';
import Error from './Error';
import Swal from 'sweetalert2'   
// import ReactTooltip from 'react-tooltip';

export default function Result() {
    //ÏÉÅÌÉúÍ∞í Ï†ïÏùò
    const [thisResult, setThisResult] = useState(false); //Î∞±ÏóîÎìúÎ°úÎ∂ÄÌÑ∞ Î∞õÏïÑÏò¨ Îç∞Ïù¥ÌÑ∞
    const [isError, setIsError] = useState(false); //Í≤∞Í≥º Í∞íÏù¥ ÏóêÎü¨Ïù∏ÏßÄ Ïó¨Î∂Ä Ï†ÄÏû•
    const [answer, setAnswer] = useState(false); //ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†ÌÉùÌïú ÌïôÎ¨∏ ÏÑ§Ï†ï

    //ÌÖåÏä§Ìä∏Ïö©
    // let testData = {
    //     "list":[
    //         {
    //             "academicName":"Í≥µÍ≥ºÎåÄÌïô",
    //             "departmentList":"AIÏ†ÑÍ≥µ,Ïª¥Ìì®ÌÑ∞Í≥µÌïôÎ∂Ä,ÏÇ∞ÏóÖÍ≤ΩÏòÅÍ≥µÌïôÍ≥º,Ï†ÑÏûêÍ≥µÌïôÍ≥º,Ï†ïÎ≥¥ÌÜµÏã†Í≥µÌïôÍ≥º"
    //         },
    //         {
    //             "academicName":"ÏÇ¨ÌöåÍ≥ºÌïôÎåÄÌïô",
    //             "departmentList": "Í≤ΩÏòÅÌïôÎ∂Ä, Íµ≠Ï†úÌïôÎ∂Ä, Íµ≠Ï†úÌÜµÏÉÅÌïôÍ≥º, Í≤ΩÏ†úÌïôÍ≥º, Íµ≠Ï†úÍ∏àÏúµÌïôÍ≥º, ÎØ∏ÎîîÏñ¥Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖòÌïôÍ≥º, Í¥ëÍ≥†prÌïôÍ≥º, Î¨∏ÌôîÏΩòÌÖêÏ∏†Ï†ÑÍ≥µ, GBTÌïôÎ∂Ä"
    //         }
    //     ]
    // }

    //ÌôîÎ©¥ Ïù¥Îèô Ï†úÏñ¥Ïö© callbackÌï®Ïàò Ï†ïÏùò
    let navigate = useNavigate();




    useEffect(() => {
        //ÏûÑÏãú ÏïÑÏù¥Îîî ÏÑ§Ï†ï
        let testKeyValidate = sessionStorage.getItem('testKey');
        let resultType = sessionStorage.getItem('result1Type');

        // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•Îêú Í≤∞Í≥ºÍ∞íÏùÑ Î∞±ÏóîÎìúÏóê ÏöîÏ≤≠
        RecommendService.getFirstSectionResult(resultType, testKeyValidate).then(
            (response) => {

                // console.log("getData:", response.data)

                //ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ÏãùÎ≥ÑÏö© ÏÑ∏ÏÖò ÏÖãÌåÖ
                sessionStorage.setItem('testKey', response.data.testKey);

                // console.log("response.data.list",response.data.list);

                //Ï†ÑÎã¨Î∞õÏùÄ Í∞íÏùÑ Îç∞Ïù¥ÌÑ∞Î°ú Ï†ÄÏû•
                setThisResult(response.data.list);
                //Ïã§Ìñâ
                //ShowResult();
            }
        ).catch(
            (Error) => {
                //ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏùåÏùÑ Ï†ÄÏû•
                setIsError(true);
                
            }
        )

        //ÌÖåÏä§Ìä∏Ïö©(ÏãúÏûë)
        //setThisResult(testData.list);
        //thisResultÎäî ÌÖåÏä§Ìä∏ Ï¢ÖÎ£åÎêòÎ©¥ ÏÇ≠Ï†ú Ï≤òÎ¶¨
        
        ShowResult();
    },[])


    // useEffect(() => {
    //     ShowResult();
    // },[thisResult])


    const ShowResult = () => {
        // console.log('thisResult:',thisResult);
        // console.log('testData.list.academicName:',thisResult[0]);
        // console.log('testData.list.academicName:',testData.list[0]);

        if(!thisResult){
            return;
        }

        return(
            <>
                <Accordion style={{width: "90%"}}>
                    {
                        //testData.list.map(thisData => (
                        thisResult.map(thisData => (
                            <>
                                <Accordion.Item eventKey={thisData.academicName}>
                                    <div id={`${thisData.academicName}`} onClick={selectResult}>
                                        <Accordion.Header>{thisData.academicName}</Accordion.Header>
                                    </div>
                                    <Accordion.Body>
                                        {thisData.departmentList}
                                        {/* <ListGroup>
                                            <ListGroup.Item>{thisData.departmentList}</ListGroup.Item>
                                        </ListGroup> */}
                                    {/* <div className='eachResult' key={thisData.academicName} data-tip data-for={`tooltip${thisData.academicName}`} onClick={()=>{selectAcademicName(thisData.academicName)}}>
                                        
                                            {thisData.academicName}
                                        
                                            <ReactTooltip
                                                id={`tooltip${thisData.academicName}`}
                                                effect="solid"
                                                place="bottom"
                                                type="dark"
                                                key={thisData.departmentList}
                                                >
                                                {thisData.departmentList}
                                            </ReactTooltip>
                                    </div> */}
                                    </Accordion.Body>
                                </Accordion.Item>
                            </>
                        ))
                    }
                </Accordion>
            </>
        )
    }

    const selectResult =(event) =>{
        let result = event.currentTarget.id;

        // console.log("thisAcademicName:",result);
        setAnswer(result);


        //ÏÑ†ÌÉùÌïú Ï†ÑÍ≥µÏóê ÎåÄÌï¥ ÏÉâ Î≥ÄÍ≤Ω(ÌîÑÎ°†Ìä∏Ïóê ÌëúÏãú)
        document.getElementById(result).style.border = "1px solid #002F5A";
        document.getElementById(result).style.color = "white";
    }
 
    
    const goToNext = () => {
        //ÏÇ¨Ïö©ÏûêÍ∞Ä Í∞íÏùÑ ÏÑ†ÌÉùÌñàÏùÑ Í≤ΩÏö∞ÏóêÎßå ÏÑ†ÌÉùÍ∞íÏùÑ Î∞±ÏóîÎìúÎ°ú Ï†ÑÏÜ°
        if(answer !== false){
            //ÏûÑÏãú ÏïÑÏù¥Îîî ÏÑ§Ï†ï
            let testKeyValidate = sessionStorage.getItem('testKey');

            //APIÏ†ÑÏÜ°
            RecommendService.submitFirstSectionResult(answer, testKeyValidate).then(
                (response) => {
                    sessionStorage.setItem('recommendFirstResult', true);
                    sessionStorage.setItem('questionNum', 1);
        
                    //2Ï∞® ÏßàÎ¨∏ pageÎ°ú Ïù¥Îèô
                    navigate("/question2");
                    window.location.reload();
                }
            );
            // console.log("answer:",answer);

        }
        else{
            Swal.fire({
                text: "ÏÑπÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöîüòâ",
                icon: undefined,
                confirmButtonText: 'ÌôïÏù∏',
                confirmButtonColor: '#002F5A'
              });
        }
    }



  return (
    <BodyBlock>
        <div className="container">
            <div className='notice'>
                <span>Í≥µÎ∂ÄÌïòÍ≥† Ïã∂ÏùÄ ÌïôÎ¨∏ ÏÑπÌÑ∞ 1Í∞úÎ•º Í≥®ÎùºÏ£ºÏÑ∏Ïöî!</span><br/>
                <span>ÏÑ†ÌÉù ÏÑπÌÑ∞Ïóê Îî∞Îùº ÏµúÏ¢ÖÍ≤∞Í≥ºÍ∞Ä Îã¨ÎùºÏßà Ïàò ÏûàÏñ¥Ïöî.</span>
            </div>
            <div className='resultFrame'>
                {
                    !isError?
                    <>
                        {
                            !thisResult?
                            <></>:
                            <ShowResult/>  
                        }
                    </>:
                        <Error/>
                }
            </div>
            <div className='nextButtonFrame'>
            {
                !isError?
                <Button className='nextButton' onClick={() => goToNext()}>Îã§Ïùå</Button>:
                <></>
            }
            </div>
        </div>
    </BodyBlock>
  )
}


//CSS
const BodyBlock = styled.div`
    .container{
        display: grid;
        grid-template-rows: 1fr 5fr 1fr;
        background-color: white;
        text-align: center;
        /*justify-content: center;*/
        
        
        /*vertical-align: middle;*/
        row-gap: 10px;

        height: 70vh;
        width: 45vh;
    }
    

    /*ÏïàÎÇ¥Î¨∏Íµ¨*/
    .notice{
        grid-row-start: 1;
        grid-row-end: 2;

        /*grid-template-rows: repeat(auto-fit, minmax(300px, auto));*/

        align-items: center;
        
        /*Í∏ÄÏî®*/
        padding-top: 3%;
        font-size: 15px;
        color: #5a5a5a;

    }

    /*ÌïôÎ¨∏Í≤∞Í≥º*/
    .resultFrame{
        grid-row-start: 2;
        grid-row-end: 3;
        /*grid-template-rows: repeat(auto-fit, minmax(300px, auto));*/

        //Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨Ïö© ÏÑ†Ïñ∏
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: center;

        .eachResult:nth-child(odd){

            background-color: #002F5A;
            opacity: 0.8;
        
            /*Î™®Ïñë*/
            border-radius: 5px;
            height: 3em;
            width: 50%;
        
            /*Í∏ÄÏî®*/
            font-size: 14px;
            color: white;
            font-weight: bold;
            padding-top: 10px;
    
            /*Ìò∏Î≤Ñ*/
            &:hover {
                background-color: #002F5A;
                opacity: 1;
            }
        }

        .eachResult:nth-child(even){

            background-color: #028799;
            opacity: 0.8;
        
            /*Î™®Ïñë*/
            border-radius: 5px;
            height: 3em;
            width: 50%;
        
            /*Í∏ÄÏî®*/
            font-size: 14px;
            color: white;
            font-weight: bold;
            padding-top: 10px;
    
            /*Ìò∏Î≤Ñ*/
            &:hover {
                background-color: #028799;
                opacity: 1;
            }
        }
    }

   
    /*Îã§Ïùå Î≤ÑÌäº*/
    .nextButtonFrame{
        grid-row-start: 3;
        grid-row-end: 4;
        /*grid-template-rows: repeat(auto-fit, minmax(300px, auto));*/

        //Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨Ïö© ÏÑ†Ïñ∏
        display: flex;
        justify-content: center;
        align-items: center;

        .nextButton{

            background-color: #002F5A;
            opacity: 0.8;
        
            /*Î™®Ïñë*/
            border-radius: 5px;
            width: 40%;
        
            /*Í∏ÄÏî®*/
            font-size: 14px;
            color: white;
            font-weight: bold;
    
            /*Ìò∏Î≤Ñ*/
            &:hover {
                background-color: #002F5A;
                opacity: 0.9;
            }
        }
    }
`